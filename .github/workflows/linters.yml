name: Linters
on: 
   workflow_call:
    inputs:
      compare-branch:
        required: true
        type: string
      python-ver:
        required: false
        type: string
      requirements-path:
        required: false
        type: string
jobs:
  ruff:
    runs-on: ubuntu-latest
    env: 
      CONFIG: .ibex-shared-workflows/ruff.toml
    steps:
      - name: get Python version or use default.
        run: |
          echo "PY_VER=${{ inputs.python-ver || '3.10' }}" >> $GITHUB_ENV
      - uses: actions/setup-python@v5
        with:
           python-version: ${{ env.PY_VER }}
      - run: pip install ruff
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # If no local ruff.toml exists fetch the default config from reusable workflows.
      - name: Use default config
        uses: actions/checkout@v4
        if: ${{ hashFiles('ruff.toml') == ''}}
        with:
          repository: ISISComputingGroup/reusable-workflows
          path: .ibex-shared-workflows
      # If a local config exists set the config to be the environment variable so it is properly used.
      - name: Use local config.
        if:  ${{ hashFiles('ruff.toml') != ''}}
        run: |
          echo "CONFIG=ruff.toml" >> $GITHUB_ENV
      - name: Changed Files
        run: git diff ${{ inputs.compare-branch }}..HEAD --name-only --diff-filter=ACM -z "*.py" | xargs -0 --no-run-if-empty echo
      - name: Run Ruff Check on Changed Files
        run: git diff ${{ inputs.compare-branch }}..HEAD --name-only --diff-filter=ACM -z "*.py" | xargs -0 --no-run-if-empty ruff check --config ${{ env.CONFIG }} --output-format=github
      - name: Run Ruff Format Check on Changed Files 
        if: success() || failure()  # Run the format check even if the previous check fails (but not always, as should not run on a failed build.)
        run: git diff ${{ inputs.compare-branch }}..HEAD --name-only --diff-filter=ACM -z "*.py" | xargs -0 --no-run-if-empty ruff format --check --config ${{ env.CONFIG }}
  pyright:
    runs-on: ubuntu-latest
    steps:
      - name: get Python version or use default.
        run: |
          echo "PY_VER=${{ inputs.python-ver || '3.10' }}" >> $GITHUB_ENV
      - uses: actions/setup-python@v5
        with:
           python-version: ${{ env.PY_VER }}
      - run: pip install unittest-xml-reporting
      - uses: actions/checkout@v4
        with:
           fetch-depth: 0
      - name: install pyright
        run: pip install pyright
      - name: install diff_cover
        run: pip install diff_cover
      - name: install pyright_plugin
        run: pip install git+https://github.com/DiamondLightSource/pyright_diff_quality_plugin.git
      - name: install project dependencies (pyproject.toml)
        run: pip install .[dev]
        if: ${{ hashFiles('pyproject.toml') != ''}}
      - name: install project dependencies (requirements.txt)
        run: pip install -r requirements.txt
        if: ${{ hashFiles('requirements.txt') != ''}}
      - name: install project dependencies (explicit path)
        run: pip install -r ${{ inputs.requirements-path }}
        if: ${{ inputs.requirements-path || '' != ''}}
      - name: Run Pyright on changes
        run: diff-quality --violations=pyright --fail-under=100 --compare-branch ${{ inputs.compare-branch }}
